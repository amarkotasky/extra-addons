#!/bin/bash
### BEGIN INIT INFO
# Provides:          zivame
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     false
# Short-Description: Example init script
# Description:       Start/stop an example script
### END INIT INFO

DESC="test script"
NAME=newstack
App_path='/opt/zivame/app'
#DAEMON=

CMD="$1"
NodeVersion="$2"
LogPath="$2"

# DEV mode requires V2 docker-compose as it uses `docker-compose run` and needs
# a different order to containers start (i.e. nginx needs to be started before
# hubot even though the actual dependency is the other direction). V2 creates
# a special network where all the containers see each other we we leverage that
# in DEV.
validate_compose_1_6_plus() {
    local docker_compose_verson="$(docker-compose --version | cut -d' ' -f3)"
    if [[ !  "${docker_compose_verson}" =~ ^[1-9]\.[6-9] && ! "${docker_compose_verson}" =~ ^[1-9]\.1[0-9] ]]; then
        echo "This command requires docker-compose 1.6.0+"
        exit 1
    fi
}
validate_compose_1_6_plus

case "${CMD}" in
    start)
        docker exec -it zivame_nginx bash -c 'nginx -t && service nginx reload'
        s1=$(curl -I http://newstack.zivame.com |head -n1|grep 200)
        s2="200"
        if [[ $s1 == *"$s2"* ]]
        then
        echo "${LogPath}"
        old_cn=$(service zivame state | grep app | awk '{print $1}')
        logpath=$2 docker-compose -f $App_path/docker-compose.yml scale zivame=4 ;
        service zivame health
        docker exec -it zivame_nginx bash -c 'nginx -t && service nginx reload'
        docker rm $(docker stop $old_cn)
        docker exec -it zivame_nginx bash -c 'nginx -t && service nginx reload'
        else
        echo "!! Alert Not Running newstack.zivame.com"
        start_status=$(logpath="${LogPath}" docker-compose -f $App_path/docker-compose.yml up -d)
        echo "start_status"
        status=$(docker-compose -f $App_path/docker-compose.yml ps)
        service zivame health
        docker exec -it zivame_nginx bash -c 'nginx -t && service nginx reload'
        logpath=$2 docker-compose -f $App_path/docker-compose.yml scale zivame=2 ;
        service zivame health
        echo "$status" 
        echo "Staring Application ...."
        fi
        ;;
    start-stage)
        start_status=$(logpath="${LogPath}" docker-compose -f $App_path/docker-compose-stage.yml up -d)
        echo "start_status"
        status=$(docker-compose -f $App_path/docker-compose-stage.yml ps)
        echo "$status" 
        echo "Staring ...."
        ;;        
    restart)
        restop_status=$(logpath="${LogPath}" docker-compose -f $App_path/docker-compose.yml down)
        echo "start_status"
        restart_status=$(logpath="${LogPath}" docker-compose -f $App_path/docker-compose.yml up -d)
        echo "$status" 
        echo "Staring ...."
        ;;
    scale)
       count_before=$(logpath="${LogPath}" sudo docker-compose -f $App_path/docker-compose.yml ps |wc -l)
        echo "$(($count_before - $2))" 
        if [[ "$2" -gt 1 || "$(($count_before - $2 - 2))" -ne "0" ]]; then
        for (( i=1; i <= $2; ++i )); do
        logpath=$3_$i docker-compose -f $App_path/docker-compose.yml scale zivame=$i ;
        done
        else
        echo "Already Scaled to 1 so skipped!!!"
        fi
        echo "$scale_status"       
        ;;
    stop)
        docker-compose -f $App_path/docker-compose.yml down 
        ;;
    rebuild)
        nversion="${NodeVersion}" docker-compose -f $App_path/docker-compose.yml build 
        ;;
    rebuild-stage)
        nversion="${NodeVersion}" docker-compose -f $App_path/docker-compose-stage.yml build 
        ;;        
    state)
        status=$(docker-compose -f $App_path/docker-compose.yml ps)
        echo "$status" 
        ;; 
    health)
        ports=$(sudo docker container ls --last 2 | grep app |grep -o -P '(?<=:).*(?=-)');
        for port in $ports; do while(true); do if(curl -I localhost:$port|head -n1|grep 200) ;then break;else echo "localhost:$port" ;sleep 5;fi; done  done
        ;;
    health-stage)
        ports=$(sudo docker-compose -f $App_path/docker-compose.yml ps |grep -o -P '(?<=:).*(?=-)');
        for port in $ports; do while(true); do if(curl -I localhost:$port|head -n1|grep 301) ;then break;else echo "localhost:$port" ;sleep 15;fi; done  done
        ;;         
    config-reload)
        docker exec -it zivame_nginx bash -c 'nginx -t && service nginx reload'
        ;;     
    logs)
        log_status=$(docker-compose -f $App_path/docker-compose.yml logs)
        echo "$log_status" 
        ;;
    clean)
        clean_status=$(sudo docker rmi -f $(sudo docker images | grep "<none>" | awk "{print \$3}"))
        echo "$clean_status" 
        ;;
    *)
        echo
        echo "Usage: $0 start|stop|rebuild|logs|health|config-reload dev"
        echo
        exit 1
esac

exit 0
